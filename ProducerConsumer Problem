 Using wait and Notify 



 public static class PC {
 
  LinkedList<Integer> list = new LinkedList<>();
  int capacity = 2;
 
 public void produce() throws InterruptedException
 {
    int value = 0;
    while (true) {
	synchronized (this)
	{

	    while (list.size() == capacity)
	    {
		wait();
	    }

	    System.out.println("Producer produced-" + value);

	    list.add(value++);

	    notify();

	    Thread.sleep(1000);
	}
    }

          
         
public void consume() throws InterruptedException
{
    while (true) {
	synchronized (this)
	{

	    while (list.size() == 0)
	    {
		wait();

	    }
	    int val = list.removeFirst();

	    System.out.println("Consumer consumed-" + val);

	    notify();

	    Thread.sleep(1000);
	}
    }
}

     
public class Threadexample {

    public static void main(String[] args) throws InterruptedException
    {
        // Object of a class that has both produce()
        // and consume() methods
        final PC pc = new PC();
 
        // Create producer thread
        Thread t1 = new Thread(new Runnable() {
          
            public void run()
            {
                try {
                    pc.produce();
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
 
        // Create consumer thread
        Thread t2 = new Thread(new Runnable() {
           
            public void run()
            {
                try {
                    pc.consume();
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
 
        // Start both threads
        t1.start();
        t2.start();
 
        // t1 finishes before t2
        t1.join();
        t2.join();
    }
     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using linked blocking queue



class Producer implements Runnable {
    private LinkedBlockingQueue<Integer> queue;
    private int maxCount;

    public Producer(LinkedBlockingQueue<Integer> queue, int maxCount) {
        this.queue = queue;
        this.maxCount = maxCount;
    }

    @Override
    public void run() {
        try {
            for (int i = 1; i <= maxCount; i++) {
                System.out.println("Producing: " + i);
                queue.put(i); // Add data to the queue
                Thread.sleep(1000); // Simulate some processing time
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer implements Runnable {
    private LinkedBlockingQueue<Integer> queue;

    public Consumer(LinkedBlockingQueue<Integer> queue) {
        this.queue = queue;
    }

    @Override
    public void run() {
        try {
            while (true) {
                int data = queue.take(); // Retrieve data from the queue (waits if the queue is empty)
                System.out.println("Consuming: " + data);
                Thread.sleep(2000); // Simulate some processing time
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class ProducerConsumerExample {
    public static void main(String[] args) {
        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>(5);
        int maxCount = 10;

        Producer producer = new Producer(queue, maxCount);
        Consumer consumer = new Consumer(queue);

        Thread producerThread = new Thread(producer);
        Thread consumerThread = new Thread(consumer);

        producerThread.start();
        consumerThread.start();
    }
}
