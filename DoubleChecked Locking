Let's understand how Double-Checked Locking works:

The getInstance() method checks if the instance is null without acquiring the lock. 
This allows threads to quickly determine if the instance is already created and return 
it without the need for synchronization, which is a performance optimization.

If instance is null, the synchronized block is entered. This synchronization block is known
as the critical section, and it is only entered if the instance has not been created yet.

Inside the critical section, the instance is checked again. This second check ensures that if 
multiple threads reached the first check and one of them successfully creates the instance, 
other threads will not recreate the instance again when they enter the synchronized block.

If instance is still null, the object is created within the synchronized block. Since the critical 
section is synchronized, only one thread can enter it at a time, ensuring that the object creation is thread-safe.

After the instance is created, subsequent calls to getInstance() will not enter the synchronized
block because the first check (non-null check) will fail, and the already created instance will be directly returned.

It's important to note that the volatile keyword is used with the instance variable to ensure
that multiple threads access the most up-to-date value of instance, preventing issues like stale
object references in a multi-threaded environment.

While Double-Checked Locking is a useful pattern, it's worth mentioning that it's primarily 
relevant for Java versions before Java 5. Starting from Java 5, the Java Memory Model has been improved, 
and the use of volatile and other synchronization primitives is more straightforward and effective. 
Therefore, modern Java applications typically prefer using static inner classes for singleton implementations,
which provide a safer and more concise alternative to Double-Checked Locking.





class Singleton {
    private volatile static Singleton instance;
  
    private Singleton() {}
    
     public static Singleton getInstance()
    {
        if (instance == null) {
            synchronized (Singleton.class)
            {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}

--------------------------------------------------------------------------------------------------------------
Alternative using inner class

public class Singleton {
    // Private constructor to prevent instantiation from outside the class
    private Singleton() {}

    // Static inner class that holds the singleton instance
    private static class SingletonHolder {
        // Static final field that holds the singleton instance
        private static final Singleton instance = new Singleton();
    }

    // Public method to access the singleton instance
    public static Singleton getInstance() {
        return SingletonHolder.instance;
    }
}


The Singleton class has a private constructor, preventing instantiation from outside the class.

Inside the Singleton class, we have a private static inner class called SingletonHolder. 
This inner class is not loaded until it is referenced, and it is loaded only once, lazily, 
when the getInstance() method is called for the first time.

The SingletonHolder class contains a static final field instance, 
which is the actual singleton instance. Since the instance field is marked final,
it guarantees that the singleton instance is initialized only once, and no other 
reference can modify it.

The getInstance() method is a public static method that returns the singleton instance. 
When this method is called, the SingletonHolder class is loaded, and the instance field 
is initialized with the singleton instance. Subsequent calls to getInstance() will return
the same instance without any additional synchronization.
